import numpy as np;
import matplotlib.pyplot as plt;
from sklearn import datasets,svm;
from sklearn.metrics import accuracy_score,f1_score,recall_score,confusion_matrix,precision_score;
from sklearn.model_selection import train_test_split;


iris_X,iris_y = datasets.load_iris(return_X_y=True)
iris_X,iris_y


train_x,test_x,train_y,test_y = train_test_split(
    iris_X,
    iris_y,
    test_size=0.3
)


model = svm.SVC(kernel='linear')
model.fit(train_x,train_y)


y_pred = model.predict(test_x)
y_pred_linear = y_pred


print("Ac scor",accuracy_score(test_y,y_pred))
print("F1 Score: ", f1_score (test_y, y_pred, average="weighted"))
print("Recall Score: ", recall_score(test_y, y_pred, average="weighted"))
print("pscore",precision_score(test_y,y_pred,average="weighted"))
print("confusion matrix",confusion_matrix(test_y,y_pred))


model = svm.SVC(kernel='rbf')
model.fit(train_x,train_y)


y_pred = model.predict(test_x)
y_pred_rbf = y_pred


print("Ac scor",accuracy_score(test_y,y_pred))
print("F1 Score: ", f1_score (test_y, y_pred, average="weighted"))
print("Recall Score: ", recall_score(test_y, y_pred, average="weighted"))
print("pscore",precision_score(test_y,y_pred,average="weighted"))
print("confusion matrix",confusion_matrix(test_y,y_pred))


model = svm.SVC(kernel='sigmoid')
model.fit(train_x,train_y)


y_pred = model.predict(test_x)
y_pred_sigmod = y_pred
print("Ac scor",accuracy_score(test_y,y_pred))
print("F1 Score: ", f1_score (test_y, y_pred, average="weighted"))
print("Recall Score: ", recall_score(test_y, y_pred, average="weighted"))
print("pscore",precision_score(test_y,y_pred,average="weighted"))
print("confusion matrix",confusion_matrix(test_y,y_pred))